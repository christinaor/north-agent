AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM app with PostgreSQL, DynamoDB, TypeScript & Python Lambdas.

Globals:
    Function:
        Timeout: 10

Resources:
    # ðŸ”¹ New S3 bucket that triggers PyLambda on .csv upload
    StressCSVBucket:
        Type: AWS::S3::Bucket

    # ðŸ”¹ New DynamoDB table for stress alerts
    HighStressUsers:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: HighStressUsers
            BillingMode: PAY_PER_REQUEST
            AttributeDefinitions:
                - AttributeName: user_id
                  AttributeType: S
                - AttributeName: timestamp
                  AttributeType: S
            KeySchema:
                - AttributeName: user_id
                  KeyType: HASH
                - AttributeName: timestamp
                  KeyType: RANGE
            StreamSpecification:
                StreamViewType: NEW_IMAGE
    # # Existing DynamoDB table for user events
    # UserTable:
    #     Type: AWS::DynamoDB::Table
    #     Properties:
    #         TableName: UserEvents
    #         BillingMode: PAY_PER_REQUEST
    #         AttributeDefinitions:
    #             - AttributeName: userId
    #               AttributeType: S
    #         KeySchema:
    #             - AttributeName: userId
    #               KeyType: HASH
    #         StreamSpecification:
    #             StreamViewType: NEW_IMAGE

    CSVProcessor:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: py-lambda/
            Handler: app.lambda_handler
            Runtime: python3.11
            Events:
                # Api:
                #     Type: Api
                #     Properties:
                #         Path: /user-python
                #         Method: post
                S3Upload:
                    Type: S3
                    Properties:
                        Bucket: !Ref StressCSVBucket
                        Events: s3:ObjectCreated:*
                        Filter:
                            S3Key:
                                Rules:
                                    - Name: suffix
                                      Value: .csv
            Policies:
                - AWSLambdaBasicExecutionRole
                - Statement:
                      - Effect: Allow
                        Action:
                            - s3:GetObject
                        Resource:
                            - arn:aws:s3:::north-agent-stack-stresscsvbucket-9x9vdndxu5mt/*
                - S3ReadPolicy:
                      BucketName: stress-csv-bucket
                - DynamoDBCrudPolicy:
                      TableName: HighStressUsers
            Environment:
                Variables:
                    DDB_TABLE: HighStressUsers
# Outputs:
#     ApiUrl:
#         Description: 'API Gateway endpoint'
#         Value:
#             Fn::Sub: 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/user'
